{"ast":null,"code":"const {\n  Parser: AcornParser,\n  isNewLine: acornIsNewLine,\n  getLineInfo: acornGetLineInfo\n} = require('acorn');\n\nconst {\n  full: acornWalkFull\n} = require('acorn-walk');\n\nconst INTERNAL_STATE_NAME = 'VM2_INTERNAL_STATE_DO_NOT_USE_OR_PROGRAM_WILL_FAIL';\n\nfunction assertType(node, type) {\n  if (!node) throw new Error(`None existent node expected '${type}'`);\n  if (node.type !== type) throw new Error(`Invalid node type '${node.type}' expected '${type}'`);\n  return node;\n}\n\nfunction makeNiceSyntaxError(message, code, filename, location, tokenizer) {\n  const loc = acornGetLineInfo(code, location);\n  let end = location;\n\n  while (end < code.length && !acornIsNewLine(code.charCodeAt(end))) {\n    end++;\n  }\n\n  let markerEnd = tokenizer.start === location ? tokenizer.end : location + 1;\n  if (!markerEnd || markerEnd > end) markerEnd = end;\n  let markerLen = markerEnd - location;\n  if (markerLen <= 0) markerLen = 1;\n\n  if (message === 'Unexpected token') {\n    const type = tokenizer.type;\n\n    if (type.label === 'name' || type.label === 'privateId') {\n      message = 'Unexpected identifier';\n    } else if (type.label === 'eof') {\n      message = 'Unexpected end of input';\n    } else if (type.label === 'num') {\n      message = 'Unexpected number';\n    } else if (type.label === 'string') {\n      message = 'Unexpected string';\n    } else if (type.label === 'regexp') {\n      message = 'Unexpected token \\'/\\'';\n      markerLen = 1;\n    } else {\n      const token = tokenizer.value || type.label;\n      message = `Unexpected token '${token}'`;\n    }\n  }\n\n  const error = new SyntaxError(message);\n  if (!filename) return error;\n  const line = code.slice(location - loc.column, end);\n  const marker = line.slice(0, loc.column).replace(/\\S/g, ' ') + '^'.repeat(markerLen);\n  error.stack = `${filename}:${loc.line}\\n${line}\\n${marker}\\n\\n${error.stack}`;\n  return error;\n}\n\nfunction transformer(args, body, isAsync, isGenerator, filename) {\n  let code;\n  let argsOffset;\n\n  if (args === null) {\n    code = body;\n  } else {\n    code = isAsync ? '(async function' : '(function';\n    if (isGenerator) code += '*';\n    code += ' anonymous(';\n    code += args;\n    argsOffset = code.length;\n    code += '\\n) {\\n';\n    code += body;\n    code += '\\n})';\n  }\n\n  const parser = new AcornParser({\n    __proto__: null,\n    ecmaVersion: 2022,\n    allowAwaitOutsideFunction: args === null && isAsync,\n    allowReturnOutsideFunction: args === null\n  }, code);\n  let ast;\n\n  try {\n    ast = parser.parse();\n  } catch (e) {\n    // Try to generate a nicer error message.\n    if (e instanceof SyntaxError && e.pos !== undefined) {\n      let message = e.message;\n      const match = message.match(/^(.*) \\(\\d+:\\d+\\)$/);\n      if (match) message = match[1];\n      e = makeNiceSyntaxError(message, code, filename, e.pos, parser);\n    }\n\n    throw e;\n  }\n\n  if (args !== null) {\n    const pBody = assertType(ast, 'Program').body;\n    if (pBody.length !== 1) throw new SyntaxError('Single function literal required');\n    const expr = pBody[0];\n    if (expr.type !== 'ExpressionStatement') throw new SyntaxError('Single function literal required');\n    const func = expr.expression;\n    if (func.type !== 'FunctionExpression') throw new SyntaxError('Single function literal required');\n    if (func.body.start !== argsOffset + 3) throw new SyntaxError('Unexpected end of arg string');\n  }\n\n  const insertions = [];\n  let hasAsync = false;\n  const TO_LEFT = -100;\n  const TO_RIGHT = 100;\n  let internStateValiable = undefined;\n  acornWalkFull(ast, (node, state, type) => {\n    if (type === 'Function') {\n      if (node.async) hasAsync = true;\n    }\n\n    const nodeType = node.type;\n\n    if (nodeType === 'CatchClause') {\n      const param = node.param;\n\n      if (param) {\n        const name = assertType(param, 'Identifier').name;\n        const cBody = assertType(node.body, 'BlockStatement');\n\n        if (cBody.body.length > 0) {\n          insertions.push({\n            __proto__: null,\n            pos: cBody.body[0].start,\n            order: TO_LEFT,\n            code: `${name}=${INTERNAL_STATE_NAME}.handleException(${name});`\n          });\n        }\n      }\n    } else if (nodeType === 'WithStatement') {\n      insertions.push({\n        __proto__: null,\n        pos: node.object.start,\n        order: TO_LEFT,\n        code: INTERNAL_STATE_NAME + '.wrapWith('\n      });\n      insertions.push({\n        __proto__: null,\n        pos: node.object.end,\n        order: TO_RIGHT,\n        code: ')'\n      });\n    } else if (nodeType === 'Identifier') {\n      if (node.name === INTERNAL_STATE_NAME) {\n        if (internStateValiable === undefined || internStateValiable.start > node.start) {\n          internStateValiable = node;\n        }\n      }\n    } else if (nodeType === 'ImportExpression') {\n      insertions.push({\n        __proto__: null,\n        pos: node.start,\n        order: TO_RIGHT,\n        code: INTERNAL_STATE_NAME + '.'\n      });\n    }\n  });\n\n  if (internStateValiable) {\n    throw makeNiceSyntaxError('Use of internal vm2 state variable', code, filename, internStateValiable.start, {\n      __proto__: null,\n      start: internStateValiable.start,\n      end: internStateValiable.end\n    });\n  }\n\n  if (insertions.length === 0) return {\n    __proto__: null,\n    code,\n    hasAsync\n  };\n  insertions.sort((a, b) => a.pos == b.pos ? a.order - b.order : a.pos - b.pos);\n  let ncode = '';\n  let curr = 0;\n\n  for (let i = 0; i < insertions.length; i++) {\n    const change = insertions[i];\n    ncode += code.substring(curr, change.pos) + change.code;\n    curr = change.pos;\n  }\n\n  ncode += code.substring(curr);\n  return {\n    __proto__: null,\n    code: ncode,\n    hasAsync\n  };\n}\n\nexports.INTERNAL_STATE_NAME = INTERNAL_STATE_NAME;\nexports.transformer = transformer;","map":{"version":3,"names":["Parser","AcornParser","isNewLine","acornIsNewLine","getLineInfo","acornGetLineInfo","require","full","acornWalkFull","INTERNAL_STATE_NAME","assertType","node","type","Error","makeNiceSyntaxError","message","code","filename","location","tokenizer","loc","end","length","charCodeAt","markerEnd","start","markerLen","label","token","value","error","SyntaxError","line","slice","column","marker","replace","repeat","stack","transformer","args","body","isAsync","isGenerator","argsOffset","parser","__proto__","ecmaVersion","allowAwaitOutsideFunction","allowReturnOutsideFunction","ast","parse","e","pos","undefined","match","pBody","expr","func","expression","insertions","hasAsync","TO_LEFT","TO_RIGHT","internStateValiable","state","async","nodeType","param","name","cBody","push","order","object","sort","a","b","ncode","curr","i","change","substring","exports"],"sources":["C:/Users/bryan/Desktop/myrepresentatives/frontend/node_modules/vm2/lib/transformer.js"],"sourcesContent":["\nconst {Parser: AcornParser, isNewLine: acornIsNewLine, getLineInfo: acornGetLineInfo} = require('acorn');\nconst {full: acornWalkFull} = require('acorn-walk');\n\nconst INTERNAL_STATE_NAME = 'VM2_INTERNAL_STATE_DO_NOT_USE_OR_PROGRAM_WILL_FAIL';\n\nfunction assertType(node, type) {\n\tif (!node) throw new Error(`None existent node expected '${type}'`);\n\tif (node.type !== type) throw new Error(`Invalid node type '${node.type}' expected '${type}'`);\n\treturn node;\n}\n\nfunction makeNiceSyntaxError(message, code, filename, location, tokenizer) {\n\tconst loc = acornGetLineInfo(code, location);\n\tlet end = location;\n\twhile (end < code.length && !acornIsNewLine(code.charCodeAt(end))) {\n\t\tend++;\n\t}\n\tlet markerEnd = tokenizer.start === location ? tokenizer.end : location + 1;\n\tif (!markerEnd || markerEnd > end) markerEnd = end;\n\tlet markerLen = markerEnd - location;\n\tif (markerLen <= 0) markerLen = 1;\n\tif (message === 'Unexpected token') {\n\t\tconst type = tokenizer.type;\n\t\tif (type.label === 'name' || type.label === 'privateId') {\n\t\t\tmessage = 'Unexpected identifier';\n\t\t} else if (type.label === 'eof') {\n\t\t\tmessage = 'Unexpected end of input';\n\t\t} else if (type.label === 'num') {\n\t\t\tmessage = 'Unexpected number';\n\t\t} else if (type.label === 'string') {\n\t\t\tmessage = 'Unexpected string';\n\t\t} else if (type.label === 'regexp') {\n\t\t\tmessage = 'Unexpected token \\'/\\'';\n\t\t\tmarkerLen = 1;\n\t\t} else {\n\t\t\tconst token = tokenizer.value || type.label;\n\t\t\tmessage = `Unexpected token '${token}'`;\n\t\t}\n\t}\n\tconst error = new SyntaxError(message);\n\tif (!filename) return error;\n\tconst line = code.slice(location - loc.column, end);\n\tconst marker = line.slice(0, loc.column).replace(/\\S/g, ' ') + '^'.repeat(markerLen);\n\terror.stack = `${filename}:${loc.line}\\n${line}\\n${marker}\\n\\n${error.stack}`;\n\treturn error;\n}\n\nfunction transformer(args, body, isAsync, isGenerator, filename) {\n\tlet code;\n\tlet argsOffset;\n\tif (args === null) {\n\t\tcode = body;\n\t} else {\n\t\tcode = isAsync ? '(async function' : '(function';\n\t\tif (isGenerator) code += '*';\n\t\tcode += ' anonymous(';\n\t\tcode += args;\n\t\targsOffset = code.length;\n\t\tcode += '\\n) {\\n';\n\t\tcode += body;\n\t\tcode += '\\n})';\n\t}\n\n\tconst parser = new AcornParser({\n\t\t__proto__: null,\n\t\tecmaVersion: 2022,\n\t\tallowAwaitOutsideFunction: args === null && isAsync,\n\t\tallowReturnOutsideFunction: args === null\n\t}, code);\n\tlet ast;\n\ttry {\n\t\tast = parser.parse();\n\t} catch (e) {\n\t\t// Try to generate a nicer error message.\n\t\tif (e instanceof SyntaxError && e.pos !== undefined) {\n\t\t\tlet message = e.message;\n\t\t\tconst match = message.match(/^(.*) \\(\\d+:\\d+\\)$/);\n\t\t\tif (match) message = match[1];\n\t\t\te = makeNiceSyntaxError(message, code, filename, e.pos, parser);\n\t\t}\n\t\tthrow e;\n\t}\n\n\tif (args !== null) {\n\t\tconst pBody = assertType(ast, 'Program').body;\n\t\tif (pBody.length !== 1) throw new SyntaxError('Single function literal required');\n\t\tconst expr = pBody[0];\n\t\tif (expr.type !== 'ExpressionStatement') throw new SyntaxError('Single function literal required');\n\t\tconst func = expr.expression;\n\t\tif (func.type !== 'FunctionExpression') throw new SyntaxError('Single function literal required');\n\t\tif (func.body.start !== argsOffset + 3) throw new SyntaxError('Unexpected end of arg string');\n\t}\n\n\tconst insertions = [];\n\tlet hasAsync = false;\n\n\tconst TO_LEFT = -100;\n\tconst TO_RIGHT = 100;\n\n\tlet internStateValiable = undefined;\n\n\tacornWalkFull(ast, (node, state, type) => {\n\t\tif (type === 'Function') {\n\t\t\tif (node.async) hasAsync = true;\n\t\t}\n\t\tconst nodeType = node.type;\n\t\tif (nodeType === 'CatchClause') {\n\t\t\tconst param = node.param;\n\t\t\tif (param) {\n\t\t\t\tconst name = assertType(param, 'Identifier').name;\n\t\t\t\tconst cBody = assertType(node.body, 'BlockStatement');\n\t\t\t\tif (cBody.body.length > 0) {\n\t\t\t\t\tinsertions.push({\n\t\t\t\t\t\t__proto__: null,\n\t\t\t\t\t\tpos: cBody.body[0].start,\n\t\t\t\t\t\torder: TO_LEFT,\n\t\t\t\t\t\tcode: `${name}=${INTERNAL_STATE_NAME}.handleException(${name});`\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (nodeType === 'WithStatement') {\n\t\t\tinsertions.push({\n\t\t\t\t__proto__: null,\n\t\t\t\tpos: node.object.start,\n\t\t\t\torder: TO_LEFT,\n\t\t\t\tcode: INTERNAL_STATE_NAME + '.wrapWith('\n\t\t\t});\n\t\t\tinsertions.push({\n\t\t\t\t__proto__: null,\n\t\t\t\tpos: node.object.end,\n\t\t\t\torder: TO_RIGHT,\n\t\t\t\tcode: ')'\n\t\t\t});\n\t\t} else if (nodeType === 'Identifier') {\n\t\t\tif (node.name === INTERNAL_STATE_NAME) {\n\t\t\t\tif (internStateValiable === undefined || internStateValiable.start > node.start) {\n\t\t\t\t\tinternStateValiable = node;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (nodeType === 'ImportExpression') {\n\t\t\tinsertions.push({\n\t\t\t\t__proto__: null,\n\t\t\t\tpos: node.start,\n\t\t\t\torder: TO_RIGHT,\n\t\t\t\tcode: INTERNAL_STATE_NAME + '.'\n\t\t\t});\n\t\t}\n\t});\n\n\tif (internStateValiable) {\n\t\tthrow makeNiceSyntaxError('Use of internal vm2 state variable', code, filename, internStateValiable.start, {\n\t\t\t__proto__: null,\n\t\t\tstart: internStateValiable.start,\n\t\t\tend: internStateValiable.end\n\t\t});\n\t}\n\n\tif (insertions.length === 0) return {__proto__: null, code, hasAsync};\n\n\tinsertions.sort((a, b) => (a.pos == b.pos ? a.order - b.order : a.pos - b.pos));\n\n\tlet ncode = '';\n\tlet curr = 0;\n\tfor (let i = 0; i < insertions.length; i++) {\n\t\tconst change = insertions[i];\n\t\tncode += code.substring(curr, change.pos) + change.code;\n\t\tcurr = change.pos;\n\t}\n\tncode += code.substring(curr);\n\n\treturn {__proto__: null, code: ncode, hasAsync};\n}\n\nexports.INTERNAL_STATE_NAME = INTERNAL_STATE_NAME;\nexports.transformer = transformer;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}