{"ast":null,"code":"'use strict'; // http://www.2ality.com/2013/10/safe-integers.html\n// http://es6.ruanyifeng.com/#docs/number\n\nexports.MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;\nexports.MIN_SAFE_INTEGER = -exports.MAX_SAFE_INTEGER;\nvar MAX_SAFE_INTEGER_STR = exports.MAX_SAFE_INTEGER_STR = String(exports.MAX_SAFE_INTEGER);\nvar MAX_SAFE_INTEGER_STR_LENGTH = MAX_SAFE_INTEGER_STR.length;\n/**\n * Detect a number string can safe convert to Javascript Number.\n *\n * @param {String} s number format string, like `\"123\"`, `\"-1000123123123123123123\"`\n * @return {Boolean}\n */\n\nexports.isSafeNumberString = function isSafeNumberString(s) {\n  if (s[0] === '-') {\n    s = s.substring(1);\n  }\n\n  if (s.length < MAX_SAFE_INTEGER_STR_LENGTH || s.length === MAX_SAFE_INTEGER_STR_LENGTH && s <= MAX_SAFE_INTEGER_STR) {\n    return true;\n  }\n\n  return false;\n};\n/**\n * Convert string to Number if string in safe Number scope.\n *\n * @param {String} s number format string.\n * @return {Number|String} success will return Number, otherise return the original string.\n */\n\n\nexports.toSafeNumber = function toSafeNumber(s) {\n  if (typeof s === 'number') {\n    return s;\n  }\n\n  return exports.isSafeNumberString(s) ? Number(s) : s;\n};\n/**\n * Produces a random integer between the inclusive `lower` and `upper` bounds.\n *\n * @param {Number} lower The lower bound.\n * @param {Number} upper The upper bound.\n * @return {Number} Returns the random number.\n */\n\n\nexports.random = function random(lower, upper) {\n  if (lower === undefined && upper === undefined) {\n    return 0;\n  }\n\n  if (upper === undefined) {\n    upper = lower;\n    lower = 0;\n  }\n\n  var temp;\n\n  if (lower > upper) {\n    temp = lower;\n    lower = upper;\n    upper = temp;\n  }\n\n  return Math.floor(lower + Math.random() * (upper - lower));\n};","map":{"version":3,"names":["exports","MAX_SAFE_INTEGER","Number","Math","pow","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER_STR","String","MAX_SAFE_INTEGER_STR_LENGTH","length","isSafeNumberString","s","substring","toSafeNumber","random","lower","upper","undefined","temp","floor"],"sources":["C:/Users/bryan/Desktop/myrepresentatives/frontend/node_modules/utility/lib/number.js"],"sourcesContent":["'use strict';\n\n// http://www.2ality.com/2013/10/safe-integers.html\n// http://es6.ruanyifeng.com/#docs/number\nexports.MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;\nexports.MIN_SAFE_INTEGER = -exports.MAX_SAFE_INTEGER;\nvar MAX_SAFE_INTEGER_STR = exports.MAX_SAFE_INTEGER_STR = String(exports.MAX_SAFE_INTEGER);\nvar MAX_SAFE_INTEGER_STR_LENGTH = MAX_SAFE_INTEGER_STR.length;\n\n/**\n * Detect a number string can safe convert to Javascript Number.\n *\n * @param {String} s number format string, like `\"123\"`, `\"-1000123123123123123123\"`\n * @return {Boolean}\n */\nexports.isSafeNumberString = function isSafeNumberString(s) {\n  if (s[0] === '-') {\n    s = s.substring(1);\n  }\n  if (s.length < MAX_SAFE_INTEGER_STR_LENGTH ||\n    (s.length === MAX_SAFE_INTEGER_STR_LENGTH && s <= MAX_SAFE_INTEGER_STR)) {\n    return true;\n  }\n  return false;\n};\n\n/**\n * Convert string to Number if string in safe Number scope.\n *\n * @param {String} s number format string.\n * @return {Number|String} success will return Number, otherise return the original string.\n */\nexports.toSafeNumber = function toSafeNumber(s) {\n  if (typeof s === 'number') {\n    return s;\n  }\n\n  return exports.isSafeNumberString(s) ? Number(s) : s;\n};\n\n/**\n * Produces a random integer between the inclusive `lower` and `upper` bounds.\n *\n * @param {Number} lower The lower bound.\n * @param {Number} upper The upper bound.\n * @return {Number} Returns the random number.\n */\nexports.random = function random(lower, upper) {\n  if (lower === undefined && upper === undefined) {\n    return 0;\n  }\n  if (upper === undefined) {\n    upper = lower;\n    lower = 0;\n  }\n  var temp;\n  if (lower > upper) {\n    temp = lower;\n    lower = upper;\n    upper = temp;\n  }\n  return Math.floor(lower + Math.random() * (upper - lower));\n};\n"],"mappings":"AAAA,a,CAEA;AACA;;AACAA,OAAO,CAACC,gBAAR,GAA2BC,MAAM,CAACD,gBAAP,IAA2BE,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY,EAAZ,IAAkB,CAAxE;AACAJ,OAAO,CAACK,gBAAR,GAA2B,CAACL,OAAO,CAACC,gBAApC;AACA,IAAIK,oBAAoB,GAAGN,OAAO,CAACM,oBAAR,GAA+BC,MAAM,CAACP,OAAO,CAACC,gBAAT,CAAhE;AACA,IAAIO,2BAA2B,GAAGF,oBAAoB,CAACG,MAAvD;AAEA;AACA;AACA;AACA;AACA;AACA;;AACAT,OAAO,CAACU,kBAAR,GAA6B,SAASA,kBAAT,CAA4BC,CAA5B,EAA+B;EAC1D,IAAIA,CAAC,CAAC,CAAD,CAAD,KAAS,GAAb,EAAkB;IAChBA,CAAC,GAAGA,CAAC,CAACC,SAAF,CAAY,CAAZ,CAAJ;EACD;;EACD,IAAID,CAAC,CAACF,MAAF,GAAWD,2BAAX,IACDG,CAAC,CAACF,MAAF,KAAaD,2BAAb,IAA4CG,CAAC,IAAIL,oBADpD,EAC2E;IACzE,OAAO,IAAP;EACD;;EACD,OAAO,KAAP;AACD,CATD;AAWA;AACA;AACA;AACA;AACA;AACA;;;AACAN,OAAO,CAACa,YAAR,GAAuB,SAASA,YAAT,CAAsBF,CAAtB,EAAyB;EAC9C,IAAI,OAAOA,CAAP,KAAa,QAAjB,EAA2B;IACzB,OAAOA,CAAP;EACD;;EAED,OAAOX,OAAO,CAACU,kBAAR,CAA2BC,CAA3B,IAAgCT,MAAM,CAACS,CAAD,CAAtC,GAA4CA,CAAnD;AACD,CAND;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAX,OAAO,CAACc,MAAR,GAAiB,SAASA,MAAT,CAAgBC,KAAhB,EAAuBC,KAAvB,EAA8B;EAC7C,IAAID,KAAK,KAAKE,SAAV,IAAuBD,KAAK,KAAKC,SAArC,EAAgD;IAC9C,OAAO,CAAP;EACD;;EACD,IAAID,KAAK,KAAKC,SAAd,EAAyB;IACvBD,KAAK,GAAGD,KAAR;IACAA,KAAK,GAAG,CAAR;EACD;;EACD,IAAIG,IAAJ;;EACA,IAAIH,KAAK,GAAGC,KAAZ,EAAmB;IACjBE,IAAI,GAAGH,KAAP;IACAA,KAAK,GAAGC,KAAR;IACAA,KAAK,GAAGE,IAAR;EACD;;EACD,OAAOf,IAAI,CAACgB,KAAL,CAAWJ,KAAK,GAAGZ,IAAI,CAACW,MAAL,MAAiBE,KAAK,GAAGD,KAAzB,CAAnB,CAAP;AACD,CAfD"},"metadata":{},"sourceType":"script"}