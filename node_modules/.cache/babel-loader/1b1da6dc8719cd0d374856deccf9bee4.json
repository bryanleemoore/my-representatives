{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst ip_1 = __importDefault(require(\"ip\"));\n\nconst net_1 = __importDefault(require(\"net\"));\n/**\n * Returns the IP address of the host that the Navigator is running on, as\n * a string in the dot-separated integer format.\n *\n * Example:\n *\n * ``` js\n * myIpAddress()\n *   // would return the string \"198.95.249.79\" if you were running the\n *   // Navigator on that host.\n * ```\n *\n * @return {String} external IP address\n */\n\n\nfunction myIpAddress() {\n  return __awaiter(this, void 0, void 0, function* () {\n    return new Promise((resolve, reject) => {\n      // 8.8.8.8:53 is \"Google Public DNS\":\n      // https://developers.google.com/speed/public-dns/\n      const socket = net_1.default.connect({\n        host: '8.8.8.8',\n        port: 53\n      });\n\n      const onError = err => {\n        // if we fail to access Google DNS (as in firewall blocks access),\n        // fallback to querying IP locally\n        resolve(ip_1.default.address());\n      };\n\n      socket.once('error', onError);\n      socket.once('connect', () => {\n        socket.removeListener('error', onError);\n        const addr = socket.address();\n        socket.destroy();\n\n        if (typeof addr === 'string') {\n          resolve(addr);\n        } else if (addr.address) {\n          resolve(addr.address);\n        } else {\n          reject(new Error('Expected a `string`'));\n        }\n      });\n    });\n  });\n}\n\nexports.default = myIpAddress;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;AAEA;;;;;;;;;;;;;;;;AAcA,SAA8BA,WAA9B,GAAyC;;IACxC,OAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAoB;MACtC;MACA;MACA,MAAMC,MAAM,GAAGC,cAAIC,OAAJ,CAAY;QAAEC,IAAI,EAAE,SAAR;QAAmBC,IAAI,EAAE;MAAzB,CAAZ,CAAf;;MACA,MAAMC,OAAO,GAAIC,GAAD,IAAe;QAC9B;QACA;QACAR,OAAO,CAACS,aAAGC,OAAH,EAAD,CAAP;MACA,CAJD;;MAKAR,MAAM,CAACS,IAAP,CAAY,OAAZ,EAAqBJ,OAArB;MACAL,MAAM,CAACS,IAAP,CAAY,SAAZ,EAAuB,MAAK;QAC3BT,MAAM,CAACU,cAAP,CAAsB,OAAtB,EAA+BL,OAA/B;QACA,MAAMM,IAAI,GAAGX,MAAM,CAACQ,OAAP,EAAb;QACAR,MAAM,CAACY,OAAP;;QACA,IAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B;UAC7Bb,OAAO,CAACa,IAAD,CAAP;QACA,CAFD,MAEO,IAAIA,IAAI,CAACH,OAAT,EAAkB;UACxBV,OAAO,CAACa,IAAI,CAACH,OAAN,CAAP;QACA,CAFM,MAEA;UACNT,MAAM,CAAC,IAAIc,KAAJ,CAAU,qBAAV,CAAD,CAAN;QACA;MACD,CAXD;IAYA,CAtBM,CAAP;EAuBA;AAAA;;AAxBDC","names":["myIpAddress","Promise","resolve","reject","socket","net_1","connect","host","port","onError","err","ip_1","address","once","removeListener","addr","destroy","Error","exports"],"sources":["../src/myIpAddress.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}