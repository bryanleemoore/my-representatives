{"ast":null,"code":"\"use strict\";\n/**\n * Returns true if the string matches the specified shell\n * expression.\n *\n * Actually, currently the patterns are shell expressions,\n * not regular expressions.\n *\n * Examples:\n *\n * ``` js\n * shExpMatch(\"http://home.netscape.com/people/ari/index.html\", \"*\\/ari/*\")\n *   // is true.\n *\n * shExpMatch(\"http://home.netscape.com/people/montulli/index.html\", \"*\\/ari/*\")\n *   // is false.\n * ```\n *\n * @param {String} str is any string to compare (e.g. the URL, or the hostname).\n * @param {String} shexp is a shell expression to compare against.\n * @return {Boolean} true if the string matches the shell expression.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction shExpMatch(str, shexp) {\n  var re = toRegExp(shexp);\n  return re.test(str);\n}\n\nexports.default = shExpMatch;\n/**\n * Converts a \"shell expression\" to a JavaScript RegExp.\n *\n * @api private\n */\n\nfunction toRegExp(str) {\n  str = String(str).replace(/\\./g, '\\\\.').replace(/\\?/g, '.').replace(/\\*/g, '.*');\n  return new RegExp('^' + str + '$');\n}","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAsBA,SAAwBA,UAAxB,CAAmCC,GAAnC,EAAgDC,KAAhD,EAA6D;EAC5D,IAAIC,EAAE,GAAGC,QAAQ,CAACF,KAAD,CAAjB;EACA,OAAOC,EAAE,CAACE,IAAH,CAAQJ,GAAR,CAAP;AACA;;AAHDK;AAKA;;;;;;AAMA,SAASF,QAAT,CAAkBH,GAAlB,EAA6B;EAC5BA,GAAG,GAAGM,MAAM,CAACN,GAAD,CAAN,CACJO,OADI,CACI,KADJ,EACW,KADX,EAEJA,OAFI,CAEI,KAFJ,EAEW,GAFX,EAGJA,OAHI,CAGI,KAHJ,EAGW,IAHX,CAAN;EAIA,OAAO,IAAIC,MAAJ,CAAW,MAAMR,GAAN,GAAY,GAAvB,CAAP;AACA","names":["shExpMatch","str","shexp","re","toRegExp","test","exports","String","replace","RegExp"],"sources":["../src/shExpMatch.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}