{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst util_1 = require(\"./util\");\n\nconst weekdays = ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT'];\n/**\n * Only the first parameter is mandatory. Either the second, the third, or both\n * may be left out.\n *\n * If only one parameter is present, the function yeilds a true value on the\n * weekday that the parameter represents. If the string \"GMT\" is specified as\n * a second parameter, times are taken to be in GMT, otherwise in local timezone.\n *\n * If both wd1 and wd1 are defined, the condition is true if the current weekday\n * is in between those two weekdays. Bounds are inclusive. If the \"GMT\" parameter\n * is specified, times are taken to be in GMT, otherwise the local timezone is\n * used.\n *\n * Valid \"weekday strings\" are:\n *\n *     SUN MON TUE WED THU FRI SAT\n *\n * Examples:\n *\n * ``` js\n * weekdayRange(\"MON\", \"FRI\")\n * true Monday trhough Friday (local timezone).\n *\n * weekdayRange(\"MON\", \"FRI\", \"GMT\")\n * same as above, but GMT timezone.\n *\n * weekdayRange(\"SAT\")\n * true on Saturdays local time.\n *\n * weekdayRange(\"SAT\", \"GMT\")\n * true on Saturdays GMT time.\n *\n * weekdayRange(\"FRI\", \"MON\")\n * true Friday through Monday (note, order does matter!).\n * ```\n *\n *\n * @param {String} wd1 one of the weekday strings.\n * @param {String} wd2 one of the weekday strings.\n * @param {String} gmt is either the string: GMT or is left out.\n * @return {Boolean}\n */\n\nfunction weekdayRange(wd1, wd2, gmt) {\n  let useGMTzone = false;\n  let wd1Index = -1;\n  let wd2Index = -1;\n  let wd2IsGmt = false;\n\n  if (util_1.isGMT(gmt)) {\n    useGMTzone = true;\n  } else if (util_1.isGMT(wd2)) {\n    useGMTzone = true;\n    wd2IsGmt = true;\n  }\n\n  wd1Index = weekdays.indexOf(wd1);\n\n  if (!wd2IsGmt && isWeekday(wd2)) {\n    wd2Index = weekdays.indexOf(wd2);\n  }\n\n  let todaysDay = getTodaysDay(useGMTzone);\n  let result = false;\n\n  if (wd2Index < 0) {\n    result = todaysDay == wd1Index;\n  } else {\n    if (wd1Index <= wd2Index) {\n      result = valueInRange(wd1Index, todaysDay, wd2Index);\n    } else {\n      result = valueInRange(wd1Index, todaysDay, 6) || valueInRange(0, todaysDay, wd2Index);\n    }\n  }\n\n  return result;\n}\n\nexports.default = weekdayRange;\n\nfunction getTodaysDay(gmt) {\n  return gmt ? new Date().getUTCDay() : new Date().getDay();\n} // start <= value <= finish\n\n\nfunction valueInRange(start, value, finish) {\n  return start <= value && value <= finish;\n}\n\nfunction isWeekday(v) {\n  return weekdays.indexOf(v) !== -1;\n}","map":{"version":3,"mappings":";;;;;;AAAA;;AAGA,MAAMA,QAAQ,GAAc,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,CAA5B;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA,SAAwBC,YAAxB,CACCC,GADD,EAECC,GAFD,EAGCC,GAHD,EAGU;EAET,IAAIC,UAAU,GAAG,KAAjB;EACA,IAAIC,QAAQ,GAAG,CAAC,CAAhB;EACA,IAAIC,QAAQ,GAAG,CAAC,CAAhB;EACA,IAAIC,QAAQ,GAAG,KAAf;;EAEA,IAAIC,aAAML,GAAN,CAAJ,EAAgB;IACfC,UAAU,GAAG,IAAb;EACA,CAFD,MAEO,IAAII,aAAMN,GAAN,CAAJ,EAAgB;IACtBE,UAAU,GAAG,IAAb;IACAG,QAAQ,GAAG,IAAX;EACA;;EAEDF,QAAQ,GAAGN,QAAQ,CAACU,OAAT,CAAiBR,GAAjB,CAAX;;EAEA,IAAI,CAACM,QAAD,IAAaG,SAAS,CAACR,GAAD,CAA1B,EAAiC;IAChCI,QAAQ,GAAGP,QAAQ,CAACU,OAAT,CAAiBP,GAAjB,CAAX;EACA;;EAED,IAAIS,SAAS,GAAGC,YAAY,CAACR,UAAD,CAA5B;EACA,IAAIS,MAAM,GAAG,KAAb;;EAEA,IAAIP,QAAQ,GAAG,CAAf,EAAkB;IACjBO,MAAM,GAAGF,SAAS,IAAIN,QAAtB;EACA,CAFD,MAEO;IACN,IAAIA,QAAQ,IAAIC,QAAhB,EAA0B;MACzBO,MAAM,GAAGC,YAAY,CAACT,QAAD,EAAWM,SAAX,EAAsBL,QAAtB,CAArB;IACA,CAFD,MAEO;MACNO,MAAM,GACLC,YAAY,CAACT,QAAD,EAAWM,SAAX,EAAsB,CAAtB,CAAZ,IACAG,YAAY,CAAC,CAAD,EAAIH,SAAJ,EAAeL,QAAf,CAFb;IAGA;EACD;;EACD,OAAOO,MAAP;AACA;;AAtCDE;;AAwCA,SAASH,YAAT,CAAsBT,GAAtB,EAAkC;EACjC,OAAOA,GAAG,GAAG,IAAIa,IAAJ,GAAWC,SAAX,EAAH,GAA4B,IAAID,IAAJ,GAAWE,MAAX,EAAtC;AACA,C,CAED;;;AACA,SAASJ,YAAT,CAAsBK,KAAtB,EAAqCC,KAArC,EAAoDC,MAApD,EAAkE;EACjE,OAAOF,KAAK,IAAIC,KAAT,IAAkBA,KAAK,IAAIC,MAAlC;AACA;;AAED,SAASX,SAAT,CAAmBY,CAAnB,EAAyB;EACxB,OAAOvB,QAAQ,CAACU,OAAT,CAAiBa,CAAjB,MAAwB,CAAC,CAAhC;AACA","names":["weekdays","weekdayRange","wd1","wd2","gmt","useGMTzone","wd1Index","wd2Index","wd2IsGmt","util_1","indexOf","isWeekday","todaysDay","getTodaysDay","result","valueInRange","exports","Date","getUTCDay","getDay","start","value","finish","v"],"sources":["../src/weekdayRange.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}