{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst dns_1 = __importDefault(require(\"dns\"));\n\nconst tls_1 = __importDefault(require(\"tls\"));\n\nconst url_1 = __importDefault(require(\"url\"));\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst agent_base_1 = require(\"agent-base\");\n\nconst socks_1 = require(\"socks\");\n\nconst debug = debug_1.default('socks-proxy-agent');\n\nfunction dnsLookup(host) {\n  return new Promise((resolve, reject) => {\n    dns_1.default.lookup(host, (err, res) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(res);\n      }\n    });\n  });\n}\n\nfunction parseSocksProxy(opts) {\n  let port = 0;\n  let lookup = false;\n  let type = 5; // Prefer `hostname` over `host`, because of `url.parse()`\n\n  const host = opts.hostname || opts.host;\n\n  if (!host) {\n    throw new TypeError('No \"host\"');\n  }\n\n  if (typeof opts.port === 'number') {\n    port = opts.port;\n  } else if (typeof opts.port === 'string') {\n    port = parseInt(opts.port, 10);\n  } // From RFC 1928, Section 3: https://tools.ietf.org/html/rfc1928#section-3\n  // \"The SOCKS service is conventionally located on TCP port 1080\"\n\n\n  if (!port) {\n    port = 1080;\n  } // figure out if we want socks v4 or v5, based on the \"protocol\" used.\n  // Defaults to 5.\n\n\n  if (opts.protocol) {\n    switch (opts.protocol.replace(':', '')) {\n      case 'socks4':\n        lookup = true;\n      // pass through\n\n      case 'socks4a':\n        type = 4;\n        break;\n\n      case 'socks5':\n        lookup = true;\n      // pass through\n\n      case 'socks': // no version specified, default to 5h\n\n      case 'socks5h':\n        type = 5;\n        break;\n\n      default:\n        throw new TypeError(`A \"socks\" protocol must be specified! Got: ${opts.protocol}`);\n    }\n  }\n\n  if (typeof opts.type !== 'undefined') {\n    if (opts.type === 4 || opts.type === 5) {\n      type = opts.type;\n    } else {\n      throw new TypeError(`\"type\" must be 4 or 5, got: ${opts.type}`);\n    }\n  }\n\n  const proxy = {\n    host,\n    port,\n    type\n  };\n  let userId = opts.userId || opts.username;\n  let password = opts.password;\n\n  if (opts.auth) {\n    const auth = opts.auth.split(':');\n    userId = auth[0];\n    password = auth[1];\n  }\n\n  if (userId) {\n    Object.defineProperty(proxy, 'userId', {\n      value: userId,\n      enumerable: false\n    });\n  }\n\n  if (password) {\n    Object.defineProperty(proxy, 'password', {\n      value: password,\n      enumerable: false\n    });\n  }\n\n  return {\n    lookup,\n    proxy\n  };\n}\n/**\n * The `SocksProxyAgent`.\n *\n * @api public\n */\n\n\nclass SocksProxyAgent extends agent_base_1.Agent {\n  constructor(_opts) {\n    let opts;\n\n    if (typeof _opts === 'string') {\n      opts = url_1.default.parse(_opts);\n    } else {\n      opts = _opts;\n    }\n\n    if (!opts) {\n      throw new TypeError('a SOCKS proxy server `host` and `port` must be specified!');\n    }\n\n    super(opts);\n    const parsedProxy = parseSocksProxy(opts);\n    this.lookup = parsedProxy.lookup;\n    this.proxy = parsedProxy.proxy;\n  }\n  /**\n   * Initiates a SOCKS connection to the specified SOCKS proxy server,\n   * which in turn connects to the specified remote host and port.\n   *\n   * @api protected\n   */\n\n\n  callback(req, opts) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        lookup,\n        proxy\n      } = this;\n      let {\n        host,\n        port,\n        timeout\n      } = opts;\n\n      if (!host) {\n        throw new Error('No `host` defined!');\n      }\n\n      if (lookup) {\n        // Client-side DNS resolution for \"4\" and \"5\" socks proxy versions.\n        host = yield dnsLookup(host);\n      }\n\n      const socksOpts = {\n        proxy,\n        destination: {\n          host,\n          port\n        },\n        command: 'connect',\n        timeout\n      };\n      debug('Creating socks proxy connection: %o', socksOpts);\n      const {\n        socket\n      } = yield socks_1.SocksClient.createConnection(socksOpts);\n      debug('Successfully created socks proxy connection');\n\n      if (opts.secureEndpoint) {\n        // The proxy is connecting to a TLS server, so upgrade\n        // this socket connection to a TLS connection.\n        debug('Upgrading socket connection to TLS');\n        const servername = opts.servername || host;\n        return tls_1.default.connect(Object.assign(Object.assign({}, omit(opts, 'host', 'hostname', 'path', 'port')), {\n          socket,\n          servername\n        }));\n      }\n\n      return socket;\n    });\n  }\n\n}\n\nexports.default = SocksProxyAgent;\n\nfunction omit(obj) {\n  const ret = {};\n  let key;\n\n  for (var _len = arguments.length, keys = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    keys[_key - 1] = arguments[_key];\n  }\n\n  for (key in obj) {\n    if (!keys.includes(key)) {\n      ret[key] = obj[key];\n    }\n  }\n\n  return ret;\n}","map":{"version":3,"mappings":"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","names":["debug","debug_1","dnsLookup","host","Promise","resolve","reject","dns_1","lookup","err","res","parseSocksProxy","opts","port","type","hostname","TypeError","parseInt","protocol","replace","proxy","userId","username","password","auth","split","Object","defineProperty","value","enumerable","SocksProxyAgent","agent_base_1","constructor","_opts","url_1","parse","parsedProxy","callback","req","timeout","Error","socksOpts","destination","command","socket","socks_1","createConnection","secureEndpoint","servername","tls_1","connect","omit","exports","obj","ret","key","keys","includes"],"sources":["../src/agent.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}