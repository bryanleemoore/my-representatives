{"ast":null,"code":"'use strict';\n\nconst {\n  Script\n} = require('vm');\n\nconst {\n  lookupCompiler,\n  removeShebang\n} = require('./compiler');\n\nconst {\n  transformer\n} = require('./transformer');\n\nconst objectDefineProperties = Object.defineProperties;\nconst MODULE_PREFIX = '(function (exports, require, module, __filename, __dirname) { ';\nconst STRICT_MODULE_PREFIX = MODULE_PREFIX + '\"use strict\"; ';\nconst MODULE_SUFFIX = '\\n});';\n/**\n * Class Script\n *\n * @public\n */\n\nclass VMScript {\n  /**\n   * The script code with wrapping. If set will invalidate the cache.<br>\n   * Writable only for backwards compatibility.\n   *\n   * @public\n   * @readonly\n   * @member {string} code\n   * @memberOf VMScript#\n   */\n\n  /**\n   * The filename used for this script.\n   *\n   * @public\n   * @readonly\n   * @since v3.9.0\n   * @member {string} filename\n   * @memberOf VMScript#\n   */\n\n  /**\n   * The line offset use for stack traces.\n   *\n   * @public\n   * @readonly\n   * @since v3.9.0\n   * @member {number} lineOffset\n   * @memberOf VMScript#\n   */\n\n  /**\n   * The column offset use for stack traces.\n   *\n   * @public\n   * @readonly\n   * @since v3.9.0\n   * @member {number} columnOffset\n   * @memberOf VMScript#\n   */\n\n  /**\n   * The compiler to use to get the JavaScript code.\n   *\n   * @public\n   * @readonly\n   * @since v3.9.0\n   * @member {(string|compileCallback)} compiler\n   * @memberOf VMScript#\n   */\n\n  /**\n   * The prefix for the script.\n   *\n   * @private\n   * @member {string} _prefix\n   * @memberOf VMScript#\n   */\n\n  /**\n   * The suffix for the script.\n   *\n   * @private\n   * @member {string} _suffix\n   * @memberOf VMScript#\n   */\n\n  /**\n   * The compiled vm.Script for the VM or if not compiled <code>null</code>.\n   *\n   * @private\n   * @member {?vm.Script} _compiledVM\n   * @memberOf VMScript#\n   */\n\n  /**\n   * The compiled vm.Script for the NodeVM or if not compiled <code>null</code>.\n   *\n   * @private\n   * @member {?vm.Script} _compiledNodeVM\n   * @memberOf VMScript#\n   */\n\n  /**\n   * The compiled vm.Script for the NodeVM in strict mode or if not compiled <code>null</code>.\n   *\n   * @private\n   * @member {?vm.Script} _compiledNodeVMStrict\n   * @memberOf VMScript#\n   */\n\n  /**\n   * The resolved compiler to use to get the JavaScript code.\n   *\n   * @private\n   * @readonly\n   * @member {compileCallback} _compiler\n   * @memberOf VMScript#\n   */\n\n  /**\n   * The script to run without wrapping.\n   *\n   * @private\n   * @member {string} _code\n   * @memberOf VMScript#\n   */\n\n  /**\n   * Whether or not the script contains async functions.\n   *\n   * @private\n   * @member {boolean} _hasAsync\n   * @memberOf VMScript#\n   */\n\n  /**\n   * Create VMScript instance.\n   *\n   * @public\n   * @param {string} code - Code to run.\n   * @param {(string|Object)} [options] - Options map or filename.\n   * @param {string} [options.filename=\"vm.js\"] - Filename that shows up in any stack traces produced from this script.\n   * @param {number} [options.lineOffset=0] - Passed to vm.Script options.\n   * @param {number} [options.columnOffset=0] - Passed to vm.Script options.\n   * @param {(string|compileCallback)} [options.compiler=\"javascript\"] - The compiler to use.\n   * @throws {VMError} If the compiler is unknown or if coffee-script was requested but the module not found.\n   */\n  constructor(code, options) {\n    const sCode = `${code}`;\n    let useFileName;\n    let useOptions;\n\n    if (arguments.length === 2) {\n      if (typeof options === 'object') {\n        useOptions = options || {\n          __proto__: null\n        };\n        useFileName = useOptions.filename;\n      } else {\n        useOptions = {\n          __proto__: null\n        };\n        useFileName = options;\n      }\n    } else if (arguments.length > 2) {\n      // We do it this way so that there are no more arguments in the function.\n      // eslint-disable-next-line prefer-rest-params\n      useOptions = arguments[2] || {\n        __proto__: null\n      };\n      useFileName = options || useOptions.filename;\n    } else {\n      useOptions = {\n        __proto__: null\n      };\n    }\n\n    const {\n      compiler = 'javascript',\n      lineOffset = 0,\n      columnOffset = 0\n    } = useOptions; // Throw if the compiler is unknown.\n\n    const resolvedCompiler = lookupCompiler(compiler);\n    objectDefineProperties(this, {\n      __proto__: null,\n      code: {\n        __proto__: null,\n\n        // Put this here so that it is enumerable, and looks like a property.\n        get() {\n          return this._prefix + this._code + this._suffix;\n        },\n\n        set(value) {\n          const strNewCode = String(value);\n          if (strNewCode === this._code && this._prefix === '' && this._suffix === '') return;\n          this._code = strNewCode;\n          this._prefix = '';\n          this._suffix = '';\n          this._compiledVM = null;\n          this._compiledNodeVM = null;\n          this._compiledCode = null;\n        },\n\n        enumerable: true\n      },\n      filename: {\n        __proto__: null,\n        value: useFileName || 'vm.js',\n        enumerable: true\n      },\n      lineOffset: {\n        __proto__: null,\n        value: lineOffset,\n        enumerable: true\n      },\n      columnOffset: {\n        __proto__: null,\n        value: columnOffset,\n        enumerable: true\n      },\n      compiler: {\n        __proto__: null,\n        value: compiler,\n        enumerable: true\n      },\n      _code: {\n        __proto__: null,\n        value: sCode,\n        writable: true\n      },\n      _prefix: {\n        __proto__: null,\n        value: '',\n        writable: true\n      },\n      _suffix: {\n        __proto__: null,\n        value: '',\n        writable: true\n      },\n      _compiledVM: {\n        __proto__: null,\n        value: null,\n        writable: true\n      },\n      _compiledNodeVM: {\n        __proto__: null,\n        value: null,\n        writable: true\n      },\n      _compiledNodeVMStrict: {\n        __proto__: null,\n        value: null,\n        writable: true\n      },\n      _compiledCode: {\n        __proto__: null,\n        value: null,\n        writable: true\n      },\n      _hasAsync: {\n        __proto__: null,\n        value: false,\n        writable: true\n      },\n      _compiler: {\n        __proto__: null,\n        value: resolvedCompiler\n      }\n    });\n  }\n  /**\n   * Wraps the code.<br>\n   * This will replace the old wrapping.<br>\n   * Will invalidate the code cache.\n   *\n   * @public\n   * @deprecated Since v3.9.0. Wrap your code before passing it into the VMScript object.\n   * @param {string} prefix - String that will be appended before the script code.\n   * @param {script} suffix - String that will be appended behind the script code.\n   * @return {this} This for chaining.\n   * @throws {TypeError} If prefix or suffix is a Symbol.\n   */\n\n\n  wrap(prefix, suffix) {\n    const strPrefix = `${prefix}`;\n    const strSuffix = `${suffix}`;\n    if (this._prefix === strPrefix && this._suffix === strSuffix) return this;\n    this._prefix = strPrefix;\n    this._suffix = strSuffix;\n    this._compiledVM = null;\n    this._compiledNodeVM = null;\n    this._compiledNodeVMStrict = null;\n    return this;\n  }\n  /**\n   * Compile this script. <br>\n   * This is useful to detect syntax errors in the script.\n   *\n   * @public\n   * @return {this} This for chaining.\n   * @throws {SyntaxError} If there is a syntax error in the script.\n   */\n\n\n  compile() {\n    this._compileVM();\n\n    return this;\n  }\n  /**\n   * Get the compiled code.\n   *\n   * @private\n   * @return {string} The code.\n   */\n\n\n  getCompiledCode() {\n    if (!this._compiledCode) {\n      const comp = this._compiler(this._prefix + removeShebang(this._code) + this._suffix, this.filename);\n\n      const res = transformer(null, comp, false, false, this.filename);\n      this._compiledCode = res.code;\n      this._hasAsync = res.hasAsync;\n    }\n\n    return this._compiledCode;\n  }\n  /**\n   * Compiles this script to a vm.Script.\n   *\n   * @private\n   * @param {string} prefix - JavaScript code that will be used as prefix.\n   * @param {string} suffix - JavaScript code that will be used as suffix.\n   * @return {vm.Script} The compiled vm.Script.\n   * @throws {SyntaxError} If there is a syntax error in the script.\n   */\n\n\n  _compile(prefix, suffix) {\n    return new Script(prefix + this.getCompiledCode() + suffix, {\n      __proto__: null,\n      filename: this.filename,\n      displayErrors: false,\n      lineOffset: this.lineOffset,\n      columnOffset: this.columnOffset\n    });\n  }\n  /**\n   * Will return the cached version of the script intended for VM or compile it.\n   *\n   * @private\n   * @return {vm.Script} The compiled script\n   * @throws {SyntaxError} If there is a syntax error in the script.\n   */\n\n\n  _compileVM() {\n    let script = this._compiledVM;\n\n    if (!script) {\n      this._compiledVM = script = this._compile('', '');\n    }\n\n    return script;\n  }\n  /**\n   * Will return the cached version of the script intended for NodeVM or compile it.\n   *\n   * @private\n   * @return {vm.Script} The compiled script\n   * @throws {SyntaxError} If there is a syntax error in the script.\n   */\n\n\n  _compileNodeVM() {\n    let script = this._compiledNodeVM;\n\n    if (!script) {\n      this._compiledNodeVM = script = this._compile(MODULE_PREFIX, MODULE_SUFFIX);\n    }\n\n    return script;\n  }\n  /**\n   * Will return the cached version of the script intended for NodeVM in strict mode or compile it.\n   *\n   * @private\n   * @return {vm.Script} The compiled script\n   * @throws {SyntaxError} If there is a syntax error in the script.\n   */\n\n\n  _compileNodeVMStrict() {\n    let script = this._compiledNodeVMStrict;\n\n    if (!script) {\n      this._compiledNodeVMStrict = script = this._compile(STRICT_MODULE_PREFIX, MODULE_SUFFIX);\n    }\n\n    return script;\n  }\n\n}\n\nexports.MODULE_PREFIX = MODULE_PREFIX;\nexports.STRICT_MODULE_PREFIX = STRICT_MODULE_PREFIX;\nexports.MODULE_SUFFIX = MODULE_SUFFIX;\nexports.VMScript = VMScript;","map":{"version":3,"names":["Script","require","lookupCompiler","removeShebang","transformer","objectDefineProperties","Object","defineProperties","MODULE_PREFIX","STRICT_MODULE_PREFIX","MODULE_SUFFIX","VMScript","constructor","code","options","sCode","useFileName","useOptions","arguments","length","__proto__","filename","compiler","lineOffset","columnOffset","resolvedCompiler","get","_prefix","_code","_suffix","set","value","strNewCode","String","_compiledVM","_compiledNodeVM","_compiledCode","enumerable","writable","_compiledNodeVMStrict","_hasAsync","_compiler","wrap","prefix","suffix","strPrefix","strSuffix","compile","_compileVM","getCompiledCode","comp","res","hasAsync","_compile","displayErrors","script","_compileNodeVM","_compileNodeVMStrict","exports"],"sources":["C:/Users/bryan/Desktop/myrepresentatives/frontend/node_modules/vm2/lib/script.js"],"sourcesContent":["'use strict';\n\nconst {Script} = require('vm');\nconst {\n\tlookupCompiler,\n\tremoveShebang\n} = require('./compiler');\nconst {\n\ttransformer\n} = require('./transformer');\n\nconst objectDefineProperties = Object.defineProperties;\n\nconst MODULE_PREFIX = '(function (exports, require, module, __filename, __dirname) { ';\nconst STRICT_MODULE_PREFIX = MODULE_PREFIX + '\"use strict\"; ';\nconst MODULE_SUFFIX = '\\n});';\n\n/**\n * Class Script\n *\n * @public\n */\nclass VMScript {\n\n\t/**\n\t * The script code with wrapping. If set will invalidate the cache.<br>\n\t * Writable only for backwards compatibility.\n\t *\n\t * @public\n\t * @readonly\n\t * @member {string} code\n\t * @memberOf VMScript#\n\t */\n\n\t/**\n\t * The filename used for this script.\n\t *\n\t * @public\n\t * @readonly\n\t * @since v3.9.0\n\t * @member {string} filename\n\t * @memberOf VMScript#\n\t */\n\n\t/**\n\t * The line offset use for stack traces.\n\t *\n\t * @public\n\t * @readonly\n\t * @since v3.9.0\n\t * @member {number} lineOffset\n\t * @memberOf VMScript#\n\t */\n\n\t/**\n\t * The column offset use for stack traces.\n\t *\n\t * @public\n\t * @readonly\n\t * @since v3.9.0\n\t * @member {number} columnOffset\n\t * @memberOf VMScript#\n\t */\n\n\t/**\n\t * The compiler to use to get the JavaScript code.\n\t *\n\t * @public\n\t * @readonly\n\t * @since v3.9.0\n\t * @member {(string|compileCallback)} compiler\n\t * @memberOf VMScript#\n\t */\n\n\t/**\n\t * The prefix for the script.\n\t *\n\t * @private\n\t * @member {string} _prefix\n\t * @memberOf VMScript#\n\t */\n\n\t/**\n\t * The suffix for the script.\n\t *\n\t * @private\n\t * @member {string} _suffix\n\t * @memberOf VMScript#\n\t */\n\n\t/**\n\t * The compiled vm.Script for the VM or if not compiled <code>null</code>.\n\t *\n\t * @private\n\t * @member {?vm.Script} _compiledVM\n\t * @memberOf VMScript#\n\t */\n\n\t/**\n\t * The compiled vm.Script for the NodeVM or if not compiled <code>null</code>.\n\t *\n\t * @private\n\t * @member {?vm.Script} _compiledNodeVM\n\t * @memberOf VMScript#\n\t */\n\n\t/**\n\t * The compiled vm.Script for the NodeVM in strict mode or if not compiled <code>null</code>.\n\t *\n\t * @private\n\t * @member {?vm.Script} _compiledNodeVMStrict\n\t * @memberOf VMScript#\n\t */\n\n\t/**\n\t * The resolved compiler to use to get the JavaScript code.\n\t *\n\t * @private\n\t * @readonly\n\t * @member {compileCallback} _compiler\n\t * @memberOf VMScript#\n\t */\n\n\t/**\n\t * The script to run without wrapping.\n\t *\n\t * @private\n\t * @member {string} _code\n\t * @memberOf VMScript#\n\t */\n\n\t/**\n\t * Whether or not the script contains async functions.\n\t *\n\t * @private\n\t * @member {boolean} _hasAsync\n\t * @memberOf VMScript#\n\t */\n\n\t/**\n\t * Create VMScript instance.\n\t *\n\t * @public\n\t * @param {string} code - Code to run.\n\t * @param {(string|Object)} [options] - Options map or filename.\n\t * @param {string} [options.filename=\"vm.js\"] - Filename that shows up in any stack traces produced from this script.\n\t * @param {number} [options.lineOffset=0] - Passed to vm.Script options.\n\t * @param {number} [options.columnOffset=0] - Passed to vm.Script options.\n\t * @param {(string|compileCallback)} [options.compiler=\"javascript\"] - The compiler to use.\n\t * @throws {VMError} If the compiler is unknown or if coffee-script was requested but the module not found.\n\t */\n\tconstructor(code, options) {\n\t\tconst sCode = `${code}`;\n\t\tlet useFileName;\n\t\tlet useOptions;\n\t\tif (arguments.length === 2) {\n\t\t\tif (typeof options === 'object') {\n\t\t\t\tuseOptions = options || {__proto__: null};\n\t\t\t\tuseFileName = useOptions.filename;\n\t\t\t} else {\n\t\t\t\tuseOptions = {__proto__: null};\n\t\t\t\tuseFileName = options;\n\t\t\t}\n\t\t} else if (arguments.length > 2) {\n\t\t\t// We do it this way so that there are no more arguments in the function.\n\t\t\t// eslint-disable-next-line prefer-rest-params\n\t\t\tuseOptions = arguments[2] || {__proto__: null};\n\t\t\tuseFileName = options || useOptions.filename;\n\t\t} else {\n\t\t\tuseOptions = {__proto__: null};\n\t\t}\n\n\t\tconst {\n\t\t\tcompiler = 'javascript',\n\t\t\tlineOffset = 0,\n\t\t\tcolumnOffset = 0\n\t\t} = useOptions;\n\n\t\t// Throw if the compiler is unknown.\n\t\tconst resolvedCompiler = lookupCompiler(compiler);\n\n\t\tobjectDefineProperties(this, {\n\t\t\t__proto__: null,\n\t\t\tcode: {\n\t\t\t\t__proto__: null,\n\t\t\t\t// Put this here so that it is enumerable, and looks like a property.\n\t\t\t\tget() {\n\t\t\t\t\treturn this._prefix + this._code + this._suffix;\n\t\t\t\t},\n\t\t\t\tset(value) {\n\t\t\t\t\tconst strNewCode = String(value);\n\t\t\t\t\tif (strNewCode === this._code && this._prefix === '' && this._suffix === '') return;\n\t\t\t\t\tthis._code = strNewCode;\n\t\t\t\t\tthis._prefix = '';\n\t\t\t\t\tthis._suffix = '';\n\t\t\t\t\tthis._compiledVM = null;\n\t\t\t\t\tthis._compiledNodeVM = null;\n\t\t\t\t\tthis._compiledCode = null;\n\t\t\t\t},\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\tfilename: {\n\t\t\t\t__proto__: null,\n\t\t\t\tvalue: useFileName || 'vm.js',\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\tlineOffset: {\n\t\t\t\t__proto__: null,\n\t\t\t\tvalue: lineOffset,\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\tcolumnOffset: {\n\t\t\t\t__proto__: null,\n\t\t\t\tvalue: columnOffset,\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\tcompiler: {\n\t\t\t\t__proto__: null,\n\t\t\t\tvalue: compiler,\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t_code: {\n\t\t\t\t__proto__: null,\n\t\t\t\tvalue: sCode,\n\t\t\t\twritable: true\n\t\t\t},\n\t\t\t_prefix: {\n\t\t\t\t__proto__: null,\n\t\t\t\tvalue: '',\n\t\t\t\twritable: true\n\t\t\t},\n\t\t\t_suffix: {\n\t\t\t\t__proto__: null,\n\t\t\t\tvalue: '',\n\t\t\t\twritable: true\n\t\t\t},\n\t\t\t_compiledVM: {\n\t\t\t\t__proto__: null,\n\t\t\t\tvalue: null,\n\t\t\t\twritable: true\n\t\t\t},\n\t\t\t_compiledNodeVM: {\n\t\t\t\t__proto__: null,\n\t\t\t\tvalue: null,\n\t\t\t\twritable: true\n\t\t\t},\n\t\t\t_compiledNodeVMStrict: {\n\t\t\t\t__proto__: null,\n\t\t\t\tvalue: null,\n\t\t\t\twritable: true\n\t\t\t},\n\t\t\t_compiledCode: {\n\t\t\t\t__proto__: null,\n\t\t\t\tvalue: null,\n\t\t\t\twritable: true\n\t\t\t},\n\t\t\t_hasAsync: {\n\t\t\t\t__proto__: null,\n\t\t\t\tvalue: false,\n\t\t\t\twritable: true\n\t\t\t},\n\t\t\t_compiler: {__proto__: null, value: resolvedCompiler}\n\t\t});\n\t}\n\n\t/**\n\t * Wraps the code.<br>\n\t * This will replace the old wrapping.<br>\n\t * Will invalidate the code cache.\n\t *\n\t * @public\n\t * @deprecated Since v3.9.0. Wrap your code before passing it into the VMScript object.\n\t * @param {string} prefix - String that will be appended before the script code.\n\t * @param {script} suffix - String that will be appended behind the script code.\n\t * @return {this} This for chaining.\n\t * @throws {TypeError} If prefix or suffix is a Symbol.\n\t */\n\twrap(prefix, suffix) {\n\t\tconst strPrefix = `${prefix}`;\n\t\tconst strSuffix = `${suffix}`;\n\t\tif (this._prefix === strPrefix && this._suffix === strSuffix) return this;\n\t\tthis._prefix = strPrefix;\n\t\tthis._suffix = strSuffix;\n\t\tthis._compiledVM = null;\n\t\tthis._compiledNodeVM = null;\n\t\tthis._compiledNodeVMStrict = null;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Compile this script. <br>\n\t * This is useful to detect syntax errors in the script.\n\t *\n\t * @public\n\t * @return {this} This for chaining.\n\t * @throws {SyntaxError} If there is a syntax error in the script.\n\t */\n\tcompile() {\n\t\tthis._compileVM();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the compiled code.\n\t *\n\t * @private\n\t * @return {string} The code.\n\t */\n\tgetCompiledCode() {\n\t\tif (!this._compiledCode) {\n\t\t\tconst comp = this._compiler(this._prefix + removeShebang(this._code) + this._suffix, this.filename);\n\t\t\tconst res = transformer(null, comp, false, false, this.filename);\n\t\t\tthis._compiledCode = res.code;\n\t\t\tthis._hasAsync = res.hasAsync;\n\t\t}\n\t\treturn this._compiledCode;\n\t}\n\n\t/**\n\t * Compiles this script to a vm.Script.\n\t *\n\t * @private\n\t * @param {string} prefix - JavaScript code that will be used as prefix.\n\t * @param {string} suffix - JavaScript code that will be used as suffix.\n\t * @return {vm.Script} The compiled vm.Script.\n\t * @throws {SyntaxError} If there is a syntax error in the script.\n\t */\n\t_compile(prefix, suffix) {\n\t\treturn new Script(prefix + this.getCompiledCode() + suffix, {\n\t\t\t__proto__: null,\n\t\t\tfilename: this.filename,\n\t\t\tdisplayErrors: false,\n\t\t\tlineOffset: this.lineOffset,\n\t\t\tcolumnOffset: this.columnOffset\n\t\t});\n\t}\n\n\t/**\n\t * Will return the cached version of the script intended for VM or compile it.\n\t *\n\t * @private\n\t * @return {vm.Script} The compiled script\n\t * @throws {SyntaxError} If there is a syntax error in the script.\n\t */\n\t_compileVM() {\n\t\tlet script = this._compiledVM;\n\t\tif (!script) {\n\t\t\tthis._compiledVM = script = this._compile('', '');\n\t\t}\n\t\treturn script;\n\t}\n\n\t/**\n\t * Will return the cached version of the script intended for NodeVM or compile it.\n\t *\n\t * @private\n\t * @return {vm.Script} The compiled script\n\t * @throws {SyntaxError} If there is a syntax error in the script.\n\t */\n\t_compileNodeVM() {\n\t\tlet script = this._compiledNodeVM;\n\t\tif (!script) {\n\t\t\tthis._compiledNodeVM = script = this._compile(MODULE_PREFIX, MODULE_SUFFIX);\n\t\t}\n\t\treturn script;\n\t}\n\n\t/**\n\t * Will return the cached version of the script intended for NodeVM in strict mode or compile it.\n\t *\n\t * @private\n\t * @return {vm.Script} The compiled script\n\t * @throws {SyntaxError} If there is a syntax error in the script.\n\t */\n\t_compileNodeVMStrict() {\n\t\tlet script = this._compiledNodeVMStrict;\n\t\tif (!script) {\n\t\t\tthis._compiledNodeVMStrict = script = this._compile(STRICT_MODULE_PREFIX, MODULE_SUFFIX);\n\t\t}\n\t\treturn script;\n\t}\n\n}\n\nexports.MODULE_PREFIX = MODULE_PREFIX;\nexports.STRICT_MODULE_PREFIX = STRICT_MODULE_PREFIX;\nexports.MODULE_SUFFIX = MODULE_SUFFIX;\nexports.VMScript = VMScript;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}