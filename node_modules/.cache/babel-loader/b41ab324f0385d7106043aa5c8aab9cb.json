{"ast":null,"code":"\"use strict\";\n\nconst path_1 = require(\"path\");\n/**\n * File URI to Path function.\n *\n * @param {String} uri\n * @return {String} path\n * @api public\n */\n\n\nfunction fileUriToPath(uri) {\n  if (typeof uri !== 'string' || uri.length <= 7 || uri.substring(0, 7) !== 'file://') {\n    throw new TypeError('must pass in a file:// URI to convert to a file path');\n  }\n\n  const rest = decodeURI(uri.substring(7));\n  const firstSlash = rest.indexOf('/');\n  let host = rest.substring(0, firstSlash);\n  let path = rest.substring(firstSlash + 1); // 2.  Scheme Definition\n  // As a special case, <host> can be the string \"localhost\" or the empty\n  // string; this is interpreted as \"the machine from which the URL is\n  // being interpreted\".\n\n  if (host === 'localhost') {\n    host = '';\n  }\n\n  if (host) {\n    host = path_1.sep + path_1.sep + host;\n  } // 3.2  Drives, drive letters, mount points, file system root\n  // Drive letters are mapped into the top of a file URI in various ways,\n  // depending on the implementation; some applications substitute\n  // vertical bar (\"|\") for the colon after the drive letter, yielding\n  // \"file:///c|/tmp/test.txt\".  In some cases, the colon is left\n  // unchanged, as in \"file:///c:/tmp/test.txt\".  In other cases, the\n  // colon is simply omitted, as in \"file:///c/tmp/test.txt\".\n\n\n  path = path.replace(/^(.+)\\|/, '$1:'); // for Windows, we need to invert the path separators from what a URI uses\n\n  if (path_1.sep === '\\\\') {\n    path = path.replace(/\\//g, '\\\\');\n  }\n\n  if (/^.+:/.test(path)) {// has Windows drive at beginning of path\n  } else {\n    // unix pathâ€¦\n    path = path_1.sep + path;\n  }\n\n  return host + path;\n}\n\nmodule.exports = fileUriToPath;","map":{"version":3,"mappings":";;AAAA;AAEA;;;;;;;;;AAQA,SAASA,aAAT,CAAuBC,GAAvB,EAAkC;EACjC,IACC,OAAOA,GAAP,KAAe,QAAf,IACAA,GAAG,CAACC,MAAJ,IAAc,CADd,IAEAD,GAAG,CAACE,SAAJ,CAAc,CAAd,EAAiB,CAAjB,MAAwB,SAHzB,EAIE;IACD,MAAM,IAAIC,SAAJ,CACL,sDADK,CAAN;EAGA;;EAED,MAAMC,IAAI,GAAGC,SAAS,CAACL,GAAG,CAACE,SAAJ,CAAc,CAAd,CAAD,CAAtB;EACA,MAAMI,UAAU,GAAGF,IAAI,CAACG,OAAL,CAAa,GAAb,CAAnB;EACA,IAAIC,IAAI,GAAGJ,IAAI,CAACF,SAAL,CAAe,CAAf,EAAkBI,UAAlB,CAAX;EACA,IAAIG,IAAI,GAAGL,IAAI,CAACF,SAAL,CAAeI,UAAU,GAAG,CAA5B,CAAX,CAdiC,CAgBjC;EACA;EACA;EACA;;EACA,IAAIE,IAAI,KAAK,WAAb,EAA0B;IACzBA,IAAI,GAAG,EAAP;EACA;;EAED,IAAIA,IAAJ,EAAU;IACTA,IAAI,GAAGE,aAAMA,UAAN,GAAYF,IAAnB;EACA,CA1BgC,CA4BjC;EACA;EACA;EACA;EACA;EACA;EACA;;;EACAC,IAAI,GAAGA,IAAI,CAACE,OAAL,CAAa,SAAb,EAAwB,KAAxB,CAAP,CAnCiC,CAqCjC;;EACA,IAAID,eAAQ,IAAZ,EAAkB;IACjBD,IAAI,GAAGA,IAAI,CAACE,OAAL,CAAa,KAAb,EAAoB,IAApB,CAAP;EACA;;EAED,IAAI,OAAOC,IAAP,CAAYH,IAAZ,CAAJ,EAAuB,CACtB;EACA,CAFD,MAEO;IACN;IACAA,IAAI,GAAGC,aAAMD,IAAb;EACA;;EAED,OAAOD,IAAI,GAAGC,IAAd;AACA;;AAEDI,iBAASd,aAAT","names":["fileUriToPath","uri","length","substring","TypeError","rest","decodeURI","firstSlash","indexOf","host","path","path_1","replace","test","module"],"sources":["../../src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}