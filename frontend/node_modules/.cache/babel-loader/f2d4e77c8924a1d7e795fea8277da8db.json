{"ast":null,"code":"\"use strict\";\n/**\n * Module dependencies.\n */\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst netmask_1 = require(\"netmask\");\n\nconst util_1 = require(\"./util\");\n/**\n * True iff the IP address of the host matches the specified IP address pattern.\n *\n * Pattern and mask specification is done the same way as for SOCKS configuration.\n *\n * Examples:\n *\n * ``` js\n * isInNet(host, \"198.95.249.79\", \"255.255.255.255\")\n *   // is true iff the IP address of host matches exactly 198.95.249.79.\n *\n * isInNet(host, \"198.95.0.0\", \"255.255.0.0\")\n *   // is true iff the IP address of the host matches 198.95.*.*.\n * ```\n *\n * @param {String} host a DNS hostname, or IP address. If a hostname is passed,\n *   it will be resoved into an IP address by this function.\n * @param {String} pattern an IP address pattern in the dot-separated format mask.\n * @param {String} mask for the IP address pattern informing which parts of the\n *   IP address should be matched against. 0 means ignore, 255 means match.\n * @return {Boolean}\n */\n\n\nfunction isInNet(host, pattern, mask) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const family = 4;\n\n    try {\n      const ip = yield util_1.dnsLookup(host, {\n        family\n      });\n\n      if (typeof ip === 'string') {\n        const netmask = new netmask_1.Netmask(pattern, mask);\n        return netmask.contains(ip);\n      }\n    } catch (err) {}\n\n    return false;\n  });\n}\n\nexports.default = isInNet;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,SAA8BA,OAA9B,CACCC,IADD,EAECC,OAFD,EAGCC,IAHD,EAGa;;IAEZ,MAAMC,MAAM,GAAG,CAAf;;IACA,IAAI;MACH,MAAMC,EAAE,GAAG,MAAMC,iBAAUL,IAAV,EAAgB;QAAEG;MAAF,CAAhB,CAAjB;;MACA,IAAI,OAAOC,EAAP,KAAc,QAAlB,EAA4B;QAC3B,MAAME,OAAO,GAAG,IAAIC,iBAAJ,CAAYN,OAAZ,EAAqBC,IAArB,CAAhB;QACA,OAAOI,OAAO,CAACE,QAAR,CAAiBJ,EAAjB,CAAP;MACA;IACD,CAND,CAME,OAAOK,GAAP,EAAY,CAAE;;IAChB,OAAO,KAAP;EACA;AAAA;;AAdDC","names":["isInNet","host","pattern","mask","family","ip","util_1","netmask","netmask_1","contains","err","exports"],"sources":["../src/isInNet.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}