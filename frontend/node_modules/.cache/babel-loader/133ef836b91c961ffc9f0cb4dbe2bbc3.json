{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst util_1 = require(\"./util\");\n/**\n * Tries to resolve the hostname. Returns true if succeeds.\n *\n * @param {String} host is the hostname from the URL.\n * @return {Boolean}\n */\n\n\nfunction isResolvable(host) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const family = 4;\n\n    try {\n      if (yield util_1.dnsLookup(host, {\n        family\n      })) {\n        return true;\n      }\n    } catch (err) {// ignore\n    }\n\n    return false;\n  });\n}\n\nexports.default = isResolvable;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;;;;;;;;AAOA,SAA8BA,YAA9B,CAA2CC,IAA3C,EAAuD;;IACtD,MAAMC,MAAM,GAAG,CAAf;;IACA,IAAI;MACH,IAAI,MAAMC,iBAAUF,IAAV,EAAgB;QAAEC;MAAF,CAAhB,CAAV,EAAuC;QACtC,OAAO,IAAP;MACA;IACD,CAJD,CAIE,OAAOE,GAAP,EAAY,CACb;IACA;;IACD,OAAO,KAAP;EACA;AAAA;;AAVDC","names":["isResolvable","host","family","util_1","err","exports"],"sources":["../src/isResolvable.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}