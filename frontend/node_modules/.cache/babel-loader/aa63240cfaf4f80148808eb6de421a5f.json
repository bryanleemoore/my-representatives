{"ast":null,"code":"'use strict';\n\nvar crypto = require('crypto');\n/**\n * hash\n *\n * @param {String} method hash method, e.g.: 'md5', 'sha1'\n * @param {String|Buffer|Object} s\n * @param {String} [format] output string format, could be 'hex' or 'base64'. default is 'hex'.\n * @return {String} md5 hash string\n * @public\n */\n\n\nexports.hash = function hash(method, s, format) {\n  var sum = crypto.createHash(method);\n  var isBuffer = Buffer.isBuffer(s);\n\n  if (!isBuffer && typeof s === 'object') {\n    s = JSON.stringify(sortObject(s));\n  }\n\n  sum.update(s, isBuffer ? 'binary' : 'utf8');\n  return sum.digest(format || 'hex');\n};\n/**\n * md5 hash\n *\n * @param {String|Buffer|Object} s\n * @param {String} [format] output string format, could be 'hex' or 'base64'. default is 'hex'.\n * @return {String} md5 hash string\n * @public\n */\n\n\nexports.md5 = function md5(s, format) {\n  return exports.hash('md5', s, format);\n};\n/**\n * sha1 hash\n *\n * @param {String|Buffer|Object} s\n * @param {String} [format] output string format, could be 'hex' or 'base64'. default is 'hex'.\n * @return {String} sha1 hash string\n * @public\n */\n\n\nexports.sha1 = function sha1(s, format) {\n  return exports.hash('sha1', s, format);\n};\n/**\n * sha256 hash\n *\n * @param {String|Buffer|Object} s\n * @param {String} [format] output string format, could be 'hex' or 'base64'. default is 'hex'.\n * @return {String} sha256 hash string\n * @public\n */\n\n\nexports.sha256 = function sha256(s, format) {\n  return exports.hash('sha256', s, format);\n};\n/**\n * HMAC algorithm.\n *\n * Equal bash:\n *\n * ```bash\n * $ echo -n \"$data\" | openssl dgst -binary -$algorithm -hmac \"$key\" | openssl $encoding\n * ```\n *\n * @param {String} algorithm, dependent on the available algorithms supported by the version of OpenSSL on the platform.\n *   Examples are 'sha1', 'md5', 'sha256', 'sha512', etc.\n *   On recent releases, `openssl list-message-digest-algorithms` will display the available digest algorithms.\n * @param {String} key, the hmac key to be used.\n * @param {String|Buffer} data, content string.\n * @param {String} [encoding='base64']\n * @return {String} digest string.\n */\n\n\nexports.hmac = function hmac(algorithm, key, data, encoding) {\n  encoding = encoding || 'base64';\n  var hmac = crypto.createHmac(algorithm, key);\n  hmac.update(data, Buffer.isBuffer(data) ? 'binary' : 'utf8');\n  return hmac.digest(encoding);\n};\n/**\n * Base64 encode string.\n *\n * @param {String|Buffer} s\n * @param {Boolean} [urlsafe=false] Encode string s using a URL-safe alphabet,\n *   which substitutes - instead of + and _ instead of / in the standard Base64 alphabet.\n * @return {String} base64 encode format string.\n */\n\n\nexports.base64encode = function base64encode(s, urlsafe) {\n  if (!Buffer.isBuffer(s)) {\n    s = typeof Buffer.from === 'function' ? Buffer.from(s) : new Buffer(s);\n  }\n\n  var encode = s.toString('base64');\n\n  if (urlsafe) {\n    encode = encode.replace(/\\+/g, '-').replace(/\\//g, '_');\n  }\n\n  return encode;\n};\n/**\n * Base64 string decode.\n *\n * @param {String} encode, base64 encoding string.\n * @param {Boolean} [urlsafe=false] Decode string s using a URL-safe alphabet,\n *   which substitutes - instead of + and _ instead of / in the standard Base64 alphabet.\n * @param {encoding} [encoding=utf8] if encoding = buffer, will return Buffer instance\n * @return {String|Buffer} plain text.\n */\n\n\nexports.base64decode = function base64decode(encodeStr, urlsafe, encoding) {\n  if (urlsafe) {\n    encodeStr = encodeStr.replace(/\\-/g, '+').replace(/_/g, '/');\n  }\n\n  var buf = typeof Buffer.from === 'function' ? Buffer.from(encodeStr, 'base64') : new Buffer(encodeStr, 'base64');\n\n  if (encoding === 'buffer') {\n    return buf;\n  }\n\n  return buf.toString(encoding || 'utf8');\n};\n\nfunction sortObject(o) {\n  if (!o || Array.isArray(o) || typeof o !== 'object') {\n    return o;\n  }\n\n  var keys = Object.keys(o);\n  keys.sort();\n  var values = [];\n\n  for (var i = 0; i < keys.length; i++) {\n    var k = keys[i];\n    values.push([k, sortObject(o[k])]);\n  }\n\n  return values;\n}","map":{"version":3,"names":["crypto","require","exports","hash","method","s","format","sum","createHash","isBuffer","Buffer","JSON","stringify","sortObject","update","digest","md5","sha1","sha256","hmac","algorithm","key","data","encoding","createHmac","base64encode","urlsafe","from","encode","toString","replace","base64decode","encodeStr","buf","o","Array","isArray","keys","Object","sort","values","i","length","k","push"],"sources":["C:/Users/bryan/Desktop/myrepresentatives/frontend/node_modules/utility/lib/crypto.js"],"sourcesContent":["'use strict';\n\nvar crypto = require('crypto');\n\n/**\n * hash\n *\n * @param {String} method hash method, e.g.: 'md5', 'sha1'\n * @param {String|Buffer|Object} s\n * @param {String} [format] output string format, could be 'hex' or 'base64'. default is 'hex'.\n * @return {String} md5 hash string\n * @public\n */\nexports.hash = function hash(method, s, format) {\n  var sum = crypto.createHash(method);\n  var isBuffer = Buffer.isBuffer(s);\n  if (!isBuffer && typeof s === 'object') {\n    s = JSON.stringify(sortObject(s));\n  }\n  sum.update(s, isBuffer ? 'binary' : 'utf8');\n  return sum.digest(format || 'hex');\n};\n\n/**\n * md5 hash\n *\n * @param {String|Buffer|Object} s\n * @param {String} [format] output string format, could be 'hex' or 'base64'. default is 'hex'.\n * @return {String} md5 hash string\n * @public\n */\nexports.md5 = function md5(s, format) {\n  return exports.hash('md5', s, format);\n};\n\n/**\n * sha1 hash\n *\n * @param {String|Buffer|Object} s\n * @param {String} [format] output string format, could be 'hex' or 'base64'. default is 'hex'.\n * @return {String} sha1 hash string\n * @public\n */\nexports.sha1 = function sha1(s, format) {\n  return exports.hash('sha1', s, format);\n};\n\n/**\n * sha256 hash\n *\n * @param {String|Buffer|Object} s\n * @param {String} [format] output string format, could be 'hex' or 'base64'. default is 'hex'.\n * @return {String} sha256 hash string\n * @public\n */\nexports.sha256 = function sha256(s, format) {\n  return exports.hash('sha256', s, format);\n};\n\n/**\n * HMAC algorithm.\n *\n * Equal bash:\n *\n * ```bash\n * $ echo -n \"$data\" | openssl dgst -binary -$algorithm -hmac \"$key\" | openssl $encoding\n * ```\n *\n * @param {String} algorithm, dependent on the available algorithms supported by the version of OpenSSL on the platform.\n *   Examples are 'sha1', 'md5', 'sha256', 'sha512', etc.\n *   On recent releases, `openssl list-message-digest-algorithms` will display the available digest algorithms.\n * @param {String} key, the hmac key to be used.\n * @param {String|Buffer} data, content string.\n * @param {String} [encoding='base64']\n * @return {String} digest string.\n */\nexports.hmac = function hmac(algorithm, key, data, encoding) {\n  encoding = encoding || 'base64';\n  var hmac = crypto.createHmac(algorithm, key);\n  hmac.update(data, Buffer.isBuffer(data) ? 'binary' : 'utf8');\n  return hmac.digest(encoding);\n};\n\n/**\n * Base64 encode string.\n *\n * @param {String|Buffer} s\n * @param {Boolean} [urlsafe=false] Encode string s using a URL-safe alphabet,\n *   which substitutes - instead of + and _ instead of / in the standard Base64 alphabet.\n * @return {String} base64 encode format string.\n */\nexports.base64encode = function base64encode(s, urlsafe) {\n  if (!Buffer.isBuffer(s)) {\n    s = typeof Buffer.from === 'function' ? Buffer.from(s) : new Buffer(s);\n  }\n  var encode = s.toString('base64');\n  if (urlsafe) {\n    encode = encode.replace(/\\+/g, '-').replace(/\\//g, '_');\n  }\n  return encode;\n};\n\n/**\n * Base64 string decode.\n *\n * @param {String} encode, base64 encoding string.\n * @param {Boolean} [urlsafe=false] Decode string s using a URL-safe alphabet,\n *   which substitutes - instead of + and _ instead of / in the standard Base64 alphabet.\n * @param {encoding} [encoding=utf8] if encoding = buffer, will return Buffer instance\n * @return {String|Buffer} plain text.\n */\nexports.base64decode = function base64decode(encodeStr, urlsafe, encoding) {\n  if (urlsafe) {\n    encodeStr = encodeStr.replace(/\\-/g, '+').replace(/_/g, '/');\n  }\n  var buf = typeof Buffer.from === 'function' ? Buffer.from(encodeStr, 'base64') : new Buffer(encodeStr, 'base64');\n  if (encoding === 'buffer') {\n    return buf;\n  }\n  return buf.toString(encoding || 'utf8');\n};\n\nfunction sortObject(o) {\n  if (!o || Array.isArray(o) || typeof o !== 'object') {\n    return o;\n  }\n  var keys = Object.keys(o);\n  keys.sort();\n  var values = [];\n  for (var i = 0; i < keys.length; i++) {\n    var k = keys[i];\n    values.push([k, sortObject(o[k])]);\n  }\n  return values;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}