{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst net_1 = __importDefault(require(\"net\"));\n\nconst tls_1 = __importDefault(require(\"tls\"));\n\nconst once_1 = __importDefault(require(\"@tootallnate/once\"));\n\nconst crypto_1 = __importDefault(require(\"crypto\"));\n\nconst get_uri_1 = __importDefault(require(\"get-uri\"));\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst raw_body_1 = __importDefault(require(\"raw-body\"));\n\nconst url_1 = require(\"url\");\n\nconst http_proxy_agent_1 = require(\"http-proxy-agent\");\n\nconst https_proxy_agent_1 = require(\"https-proxy-agent\");\n\nconst socks_proxy_agent_1 = require(\"socks-proxy-agent\");\n\nconst pac_resolver_1 = __importDefault(require(\"pac-resolver\"));\n\nconst agent_base_1 = require(\"agent-base\");\n\nconst debug = debug_1.default('pac-proxy-agent');\n/**\n * The `PacProxyAgent` class.\n *\n * A few different \"protocol\" modes are supported (supported protocols are\n * backed by the `get-uri` module):\n *\n *   - \"pac+data\", \"data\" - refers to an embedded \"data:\" URI\n *   - \"pac+file\", \"file\" - refers to a local file\n *   - \"pac+ftp\", \"ftp\" - refers to a file located on an FTP server\n *   - \"pac+http\", \"http\" - refers to an HTTP endpoint\n *   - \"pac+https\", \"https\" - refers to an HTTPS endpoint\n *\n * @api public\n */\n\nclass PacProxyAgent extends agent_base_1.Agent {\n  constructor(uri) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super(opts);\n\n    this.clearResolverPromise = () => {\n      this.resolverPromise = undefined;\n    };\n\n    debug('Creating PacProxyAgent with URI %o and options %o', uri, opts); // Strip the \"pac+\" prefix\n\n    this.uri = uri.replace(/^pac\\+/i, '');\n    this.opts = Object.assign({}, opts);\n    this.cache = undefined;\n    this.resolver = undefined;\n    this.resolverHash = '';\n    this.resolverPromise = undefined; // For `PacResolver`\n\n    if (!this.opts.filename) {\n      this.opts.filename = uri;\n    }\n  }\n  /**\n   * Loads the PAC proxy file from the source if necessary, and returns\n   * a generated `FindProxyForURL()` resolver function to use.\n   *\n   * @api private\n   */\n\n\n  getResolver() {\n    if (!this.resolverPromise) {\n      this.resolverPromise = this.loadResolver();\n      this.resolverPromise.then(this.clearResolverPromise, this.clearResolverPromise);\n    }\n\n    return this.resolverPromise;\n  }\n\n  loadResolver() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        // (Re)load the contents of the PAC file URI\n        const code = yield this.loadPacFile(); // Create a sha1 hash of the JS code\n\n        const hash = crypto_1.default.createHash('sha1').update(code).digest('hex');\n\n        if (this.resolver && this.resolverHash === hash) {\n          debug('Same sha1 hash for code - contents have not changed, reusing previous proxy resolver');\n          return this.resolver;\n        } // Cache the resolver\n\n\n        debug('Creating new proxy resolver instance');\n        this.resolver = pac_resolver_1.default(code, this.opts); // Store that sha1 hash for future comparison purposes\n\n        this.resolverHash = hash;\n        return this.resolver;\n      } catch (err) {\n        if (this.resolver && err.code === 'ENOTMODIFIED') {\n          debug('Got ENOTMODIFIED response, reusing previous proxy resolver');\n          return this.resolver;\n        }\n\n        throw err;\n      }\n    });\n  }\n  /**\n   * Loads the contents of the PAC proxy file.\n   *\n   * @api private\n   */\n\n\n  loadPacFile() {\n    return __awaiter(this, void 0, void 0, function* () {\n      debug('Loading PAC file: %o', this.uri);\n      const rs = yield get_uri_1.default(this.uri, {\n        cache: this.cache\n      });\n      debug('Got `Readable` instance for URI');\n      this.cache = rs;\n      const buf = yield raw_body_1.default(rs);\n      debug('Read %o byte PAC file from URI', buf.length);\n      return buf.toString('utf8');\n    });\n  }\n  /**\n   * Called when the node-core HTTP client library is creating a new HTTP request.\n   *\n   * @api protected\n   */\n\n\n  callback(req, opts) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        secureEndpoint\n      } = opts; // First, get a generated `FindProxyForURL()` function,\n      // either cached or retrieved from the source\n\n      const resolver = yield this.getResolver(); // Calculate the `url` parameter\n\n      const defaultPort = secureEndpoint ? 443 : 80;\n      let path = req.path;\n      let search = null;\n      const firstQuestion = path.indexOf('?');\n\n      if (firstQuestion !== -1) {\n        search = path.substring(firstQuestion);\n        path = path.substring(0, firstQuestion);\n      }\n\n      const urlOpts = Object.assign(Object.assign({}, opts), {\n        protocol: secureEndpoint ? 'https:' : 'http:',\n        pathname: path,\n        search,\n        // need to use `hostname` instead of `host` otherwise `port` is ignored\n        hostname: opts.host,\n        host: null,\n        href: null,\n        // set `port` to null when it is the protocol default port (80 / 443)\n        port: defaultPort === opts.port ? null : opts.port\n      });\n      const url = url_1.format(urlOpts);\n      debug('url: %o', url);\n      let result = yield resolver(url); // Default to \"DIRECT\" if a falsey value was returned (or nothing)\n\n      if (!result) {\n        result = 'DIRECT';\n      }\n\n      const proxies = String(result).trim().split(/\\s*;\\s*/g).filter(Boolean);\n\n      if (this.opts.fallbackToDirect && !proxies.includes('DIRECT')) {\n        proxies.push('DIRECT');\n      }\n\n      for (const proxy of proxies) {\n        let agent = null;\n        let socket = null;\n        const [type, target] = proxy.split(/\\s+/);\n        debug('Attempting to use proxy: %o', proxy);\n\n        if (type === 'DIRECT') {\n          // Direct connection to the destination endpoint\n          socket = secureEndpoint ? tls_1.default.connect(opts) : net_1.default.connect(opts);\n        } else if (type === 'SOCKS' || type === 'SOCKS5') {\n          // Use a SOCKSv5h proxy\n          agent = new socks_proxy_agent_1.SocksProxyAgent(`socks://${target}`);\n        } else if (type === 'SOCKS4') {\n          // Use a SOCKSv4a proxy\n          agent = new socks_proxy_agent_1.SocksProxyAgent(`socks4a://${target}`);\n        } else if (type === 'PROXY' || type === 'HTTP' || type === 'HTTPS') {\n          // Use an HTTP or HTTPS proxy\n          // http://dev.chromium.org/developers/design-documents/secure-web-proxy\n          const proxyURL = `${type === 'HTTPS' ? 'https' : 'http'}://${target}`;\n          const proxyOpts = Object.assign(Object.assign({}, this.opts), url_1.parse(proxyURL));\n\n          if (secureEndpoint) {\n            agent = new https_proxy_agent_1.HttpsProxyAgent(proxyOpts);\n          } else {\n            agent = new http_proxy_agent_1.HttpProxyAgent(proxyOpts);\n          }\n        }\n\n        try {\n          if (socket) {\n            // \"DIRECT\" connection, wait for connection confirmation\n            yield once_1.default(socket, 'connect');\n            req.emit('proxy', {\n              proxy,\n              socket\n            });\n            return socket;\n          }\n\n          if (agent) {\n            const s = yield agent.callback(req, opts);\n            req.emit('proxy', {\n              proxy,\n              socket: s\n            });\n            return s;\n          }\n\n          throw new Error(`Could not determine proxy type for: ${proxy}`);\n        } catch (err) {\n          debug('Got error for proxy %o: %o', proxy, err);\n          req.emit('proxy', {\n            proxy,\n            error: err\n          });\n        }\n      }\n\n      throw new Error(`Failed to establish a socket connection to proxies: ${JSON.stringify(proxies)}`);\n    });\n  }\n\n}\n\nexports.default = PacProxyAgent;","map":{"version":3,"mappings":"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","names":["debug","debug_1","PacProxyAgent","agent_base_1","constructor","uri","opts","resolverPromise","undefined","replace","Object","cache","resolver","resolverHash","filename","getResolver","loadResolver","then","clearResolverPromise","code","loadPacFile","hash","crypto_1","createHash","update","digest","pac_resolver_1","err","rs","get_uri_1","buf","raw_body_1","length","toString","callback","req","secureEndpoint","defaultPort","path","search","firstQuestion","indexOf","substring","urlOpts","protocol","pathname","hostname","host","href","port","url","url_1","result","proxies","String","trim","split","filter","Boolean","fallbackToDirect","includes","push","proxy","agent","socket","type","target","tls_1","connect","net_1","socks_proxy_agent_1","proxyURL","proxyOpts","https_proxy_agent_1","http_proxy_agent_1","once_1","emit","s","Error","error","JSON","stringify","exports"],"sources":["../src/agent.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}