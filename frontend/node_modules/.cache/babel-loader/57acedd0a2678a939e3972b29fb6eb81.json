{"ast":null,"code":"\"use strict\";\n/**\n * True during (or between) the specified time(s).\n *\n * Even though the examples don't show it, this parameter may be present in\n * each of the different parameter profiles, always as the last parameter.\n *\n *\n * Examples:\n *\n * ``` js\n * timerange(12)\n * true from noon to 1pm.\n *\n * timerange(12, 13)\n * same as above.\n *\n * timerange(12, \"GMT\")\n * true from noon to 1pm, in GMT timezone.\n *\n * timerange(9, 17)\n * true from 9am to 5pm.\n *\n * timerange(8, 30, 17, 00)\n * true from 8:30am to 5:00pm.\n *\n * timerange(0, 0, 0, 0, 0, 30)\n * true between midnight and 30 seconds past midnight.\n * ```\n *\n * timeRange(hour)\n * timeRange(hour1, hour2)\n * timeRange(hour1, min1, hour2, min2)\n * timeRange(hour1, min1, sec1, hour2, min2, sec2)\n * timeRange(hour1, min1, sec1, hour2, min2, sec2, gmt)\n *\n * @param {String} hour is the hour from 0 to 23. (0 is midnight, 23 is 11 pm.)\n * @param {String} min minutes from 0 to 59.\n * @param {String} sec seconds from 0 to 59.\n * @param {String} gmt either the string \"GMT\" for GMT timezone, or not specified, for local timezone.\n * @return {Boolean}\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction timeRange() {\n  var args = Array.prototype.slice.call(arguments),\n      lastArg = args.pop(),\n      useGMTzone = lastArg == 'GMT',\n      currentDate = new Date();\n\n  if (!useGMTzone) {\n    args.push(lastArg);\n  }\n\n  var noOfArgs = args.length,\n      result = false,\n      numericArgs = args.map(function (n) {\n    return parseInt(n);\n  }); // timeRange(hour)\n\n  if (noOfArgs == 1) {\n    result = getCurrentHour(useGMTzone, currentDate) == numericArgs[0]; // timeRange(hour1, hour2)\n  } else if (noOfArgs == 2) {\n    var currentHour = getCurrentHour(useGMTzone, currentDate);\n    result = numericArgs[0] <= currentHour && currentHour < numericArgs[1]; // timeRange(hour1, min1, hour2, min2)\n  } else if (noOfArgs == 4) {\n    result = valueInRange(secondsElapsedToday(numericArgs[0], numericArgs[1], 0), secondsElapsedToday(getCurrentHour(useGMTzone, currentDate), getCurrentMinute(useGMTzone, currentDate), 0), secondsElapsedToday(numericArgs[2], numericArgs[3], 59)); // timeRange(hour1, min1, sec1, hour2, min2, sec2)\n  } else if (noOfArgs == 6) {\n    result = valueInRange(secondsElapsedToday(numericArgs[0], numericArgs[1], numericArgs[2]), secondsElapsedToday(getCurrentHour(useGMTzone, currentDate), getCurrentMinute(useGMTzone, currentDate), getCurrentSecond(useGMTzone, currentDate)), secondsElapsedToday(numericArgs[3], numericArgs[4], numericArgs[5]));\n  }\n\n  return result;\n}\n\nexports.default = timeRange;\n\nfunction secondsElapsedToday(hh, mm, ss) {\n  return hh * 3600 + mm * 60 + ss;\n}\n\nfunction getCurrentHour(gmt, currentDate) {\n  return gmt ? currentDate.getUTCHours() : currentDate.getHours();\n}\n\nfunction getCurrentMinute(gmt, currentDate) {\n  return gmt ? currentDate.getUTCMinutes() : currentDate.getMinutes();\n}\n\nfunction getCurrentSecond(gmt, currentDate) {\n  return gmt ? currentDate.getUTCSeconds() : currentDate.getSeconds();\n} // start <= value <= finish\n\n\nfunction valueInRange(start, value, finish) {\n  return start <= value && value <= finish;\n}","map":{"version":3,"mappings":"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","names":["timeRange","args","Array","prototype","slice","call","arguments","lastArg","pop","useGMTzone","currentDate","Date","push","noOfArgs","length","result","numericArgs","map","n","parseInt","getCurrentHour","currentHour","valueInRange","secondsElapsedToday","getCurrentMinute","getCurrentSecond","exports","hh","mm","ss","gmt","getUTCHours","getHours","getUTCMinutes","getMinutes","getUTCSeconds","getSeconds","start","value","finish"],"sources":["../src/timeRange.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}