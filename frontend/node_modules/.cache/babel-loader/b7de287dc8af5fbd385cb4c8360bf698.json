{"ast":null,"code":"'use strict';\n\nvar fs = require('mz/fs');\n\nvar path = require('path');\n\nvar mkdirp = require('mkdirp');\n\nexports.strictJSONParse = function (str) {\n  var obj = JSON.parse(str);\n\n  if (!obj || typeof obj !== 'object') {\n    throw new Error('JSON string is not object');\n  }\n\n  return obj;\n};\n\nexports.readJSONSync = function (filepath) {\n  if (!fs.existsSync(filepath)) {\n    throw new Error(filepath + ' is not found');\n  }\n\n  return JSON.parse(fs.readFileSync(filepath));\n};\n\nexports.writeJSONSync = function (filepath, str, options) {\n  options = options || {};\n\n  if (!('space' in options)) {\n    options.space = 2;\n  }\n\n  mkdirp.sync(path.dirname(filepath));\n\n  if (typeof str === 'object') {\n    str = JSON.stringify(str, options.replacer, options.space) + '\\n';\n  }\n\n  fs.writeFileSync(filepath, str);\n};\n\nexports.readJSON = function (filepath) {\n  return fs.exists(filepath).then(function (exists) {\n    if (!exists) {\n      throw new Error(filepath + ' is not found');\n    }\n\n    return fs.readFile(filepath);\n  }).then(function (buf) {\n    return JSON.parse(buf);\n  });\n};\n\nexports.writeJSON = function (filepath, str, options) {\n  options = options || {};\n\n  if (!('space' in options)) {\n    options.space = 2;\n  }\n\n  if (typeof str === 'object') {\n    str = JSON.stringify(str, options.replacer, options.space) + '\\n';\n  }\n\n  return mkdir(path.dirname(filepath)).then(function () {\n    return fs.writeFile(filepath, str);\n  });\n};\n\nfunction mkdir(dir) {\n  return new Promise(function (resolve, reject) {\n    mkdirp(dir, function (err) {\n      if (err) {\n        return reject(err);\n      }\n\n      resolve();\n    });\n  });\n}","map":{"version":3,"names":["fs","require","path","mkdirp","exports","strictJSONParse","str","obj","JSON","parse","Error","readJSONSync","filepath","existsSync","readFileSync","writeJSONSync","options","space","sync","dirname","stringify","replacer","writeFileSync","readJSON","exists","then","readFile","buf","writeJSON","mkdir","writeFile","dir","Promise","resolve","reject","err"],"sources":["C:/Users/bryan/Desktop/myrepresentatives/frontend/node_modules/utility/lib/json.js"],"sourcesContent":["'use strict';\n\nvar fs = require('mz/fs');\nvar path = require('path');\nvar mkdirp = require('mkdirp');\n\nexports.strictJSONParse = function (str) {\n  var obj = JSON.parse(str);\n  if (!obj || typeof obj !== 'object') {\n    throw new Error('JSON string is not object');\n  }\n  return obj;\n};\n\nexports.readJSONSync = function(filepath) {\n  if (!fs.existsSync(filepath)) {\n    throw new Error(filepath + ' is not found');\n  }\n  return JSON.parse(fs.readFileSync(filepath));\n};\n\nexports.writeJSONSync = function(filepath, str, options) {\n  options = options || {};\n  if (!('space' in options)) {\n    options.space = 2;\n  }\n\n  mkdirp.sync(path.dirname(filepath));\n  if (typeof str === 'object') {\n    str = JSON.stringify(str, options.replacer, options.space) + '\\n';\n  }\n\n  fs.writeFileSync(filepath, str);\n};\n\nexports.readJSON = function(filepath) {\n  return fs.exists(filepath)\n    .then(function(exists) {\n      if (!exists) {\n        throw new Error(filepath + ' is not found');\n      }\n      return fs.readFile(filepath);\n    })\n    .then(function(buf) {\n      return JSON.parse(buf);\n    });\n};\n\nexports.writeJSON = function(filepath, str, options) {\n  options = options || {};\n  if (!('space' in options)) {\n    options.space = 2;\n  }\n\n  if (typeof str === 'object') {\n    str = JSON.stringify(str, options.replacer, options.space) + '\\n';\n  }\n\n  return mkdir(path.dirname(filepath))\n    .then(function() {\n      return fs.writeFile(filepath, str);\n    });\n};\n\nfunction mkdir(dir) {\n  return new Promise(function(resolve, reject) {\n    mkdirp(dir, function(err) {\n      if (err) {\n        return reject(err);\n      }\n      resolve();\n    });\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}